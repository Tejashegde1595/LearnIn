{
  "swagger": "2.0",
  "info": {
    "title": "Postgrad API",
    "version": "1.0.0",
    "description": "API of Postgrad Services"
  },
  "host": "quora.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "API#004 Postgrad",
      "description": "All operations marked with 'API#004 Postgrad' are relevant to the question use case"
    }
  ],
  "securityDefinitions": {
    "BearerAuthorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "paths": {
    "/Postgrad/create": {
      "x-swagger-router-controller": "api",
      "post": {
        "tags": [
          "API#004 Create Postgrad Info"
        ],
        "security": [
          {
            "BearerAuthorization": []
          }
        ],
        "operationId": "createPostgradInfo",
        "summary": "createPostgradInfo",
        "description": "User can add his PostgradInfo.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "in": "body",
            "name": "PostgradRequest",
            "description": "Request containing Postgrad information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostgradRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED - Postgrad Info created successfully",
            "schema": {
              "$ref": "#/definitions/PostgradResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/Postgrad/all": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#004 Get All Postgrad Information"
        ],
        "security": [
          {
            "BearerAuthorization": []
          }
        ],
        "operationId": "getAllPostgradInfo",
        "summary": "getAllPostgradInfo",
        "description": "User can get all Postgrad Information.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Postgrad Info fetched successfully",
            "schema": {
              "$ref": "#/definitions/PostgradInfoDetailsResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/Postgrad/edit/{PostgradId}": {
      "x-swagger-router-controller": "api",
      "put": {
        "tags": [
          "API#004 Edit a Postgrad Info"
        ],
        "security": [
          {
            "BearerAuthorization": []
          }
        ],
        "operationId": "editPostgradInfo",
        "summary": "editPostgradInfo",
        "description": "User can edit the Postgrad Info\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/PostgradId"
          },
          {
            "in": "body",
            "name": "PostgradInfoEditRequest",
            "description": "Request containing Postgrad Info edit information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostgradInfoEditRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Questions changed successfully",
            "schema": {
              "$ref": "#/definitions/PostgradInfoEditResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/Postgrad/delete/{PostgradId}": {
      "x-swagger-router-controller": "api",
      "delete": {
        "tags": [
          "API#004 Delete a Postgrad Info"
        ],
        "security": [
          {
            "BearerAuthorization": []
          }
        ],
        "operationId": "deletePostgradInfo",
        "summary": "deletePostgradInfo",
        "description": "Admin or user can delete the question if he has posted the question.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/PostgradId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Questions deleted successfully",
            "schema": {
              "$ref": "#/definitions/PostgradInfoDeleteResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/Postgrad/all/{userId}": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#004 Get the details of all Postgrad Info posted by a specific user"
        ],
        "security": [
          {
            "BearerAuthorization": []
          }
        ],
        "operationId": "getAllPostgradInfoByUser",
        "summary": "getAllPostgradInfoByUser",
        "description": "User can get the details of all the Postgrad infos posted by a specific user.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Fetched the questions successfully",
            "schema": {
              "$ref": "#/definitions/PostgradInfoDetailsResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "userId": {
      "name": "userId",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Unique identifier of User in a standard UUID format"
    },
    "PostgradId": {
      "name": "PostgradId",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Unique identifier of Question in a standard UUID format"
    },
    "BearerAuthorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory user credentials in bearer http authentication scheme format."
    }
  },
  "definitions": {
    "PostgradRequest": {
      "type": "object",
      "properties": {
        "Postgrad_name": {
          "type": "string",
          "description": "name of the Postgrad"
        },
        "subject": {
          "type": "string",
          "description": "name of the Postgrad"
        },
        "from_date": {
          "type": "string",
          "description": "from date of the Postgrad"
        },
        "to_date": {
          "type": "string",
          "description": "to date of the Postgrad"
        },
        "grade": {
          "type": "string",
          "description": "grade in the Postgrad"
        }
      },
      "required": [
        "Postgrad_name",
        "from_date",
        "to_date",
        "grade"
      ]
    },
    "PostgradResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Postgrad uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the PostgradInfo"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "PostgradInfoDetailsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Postgrad uuid"
        },
        "Postgrad_name": {
          "type": "string",
          "description": "name of the Postgrad"
        },
        "subject": {
          "type": "string",
          "description": "name of the Postgrad"
        },
        "from_date": {
          "type": "string",
          "description": "from date of the Postgrad"
        },
        "to_date": {
          "type": "string",
          "description": "to date of the Postgrad"
        },
        "grade": {
          "type": "string",
          "description": "grade in the Postgrad"
        }
      },
      "required": [
        "id",
        "Postgrad_name",
        "from_date",
        "to_date",
        "grade"
      ]
    },
    "PostgradInfoEditRequest": {
      "type": "object",
      "properties": {
        "Postgrad_name": {
          "type": "string",
          "description": "name of the Postgrad"
        },
        "subject": {
          "type": "string",
          "description": "name of the Postgrad"
        },
        "from_date": {
          "type": "string",
          "description": "from date of the Postgrad"
        },
        "to_date": {
          "type": "string",
          "description": "to date of the Postgrad"
        },
        "grade": {
          "type": "string",
          "description": "grade in the Postgrad"
        }
      }
    },
    "PostgradInfoEditResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Postgrad Info uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the updated Postgrad Info"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "PostgradInfoDeleteResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "question uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the deleted Postgrad Info"
        }
      },
      "required": [
        "id",
        "status"
      ]
    }
  }
}